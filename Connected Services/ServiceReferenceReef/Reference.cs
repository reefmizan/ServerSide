//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerSide.ServiceReferenceReef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : ServerSide.ServiceReferenceReef.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhonenumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServerSide.ServiceReferenceReef.TypeSurf[] SurfslstField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phonenum {
            get {
                return this.PhonenumField;
            }
            set {
                if ((object.ReferenceEquals(this.PhonenumField, value) != true)) {
                    this.PhonenumField = value;
                    this.RaisePropertyChanged("Phonenum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServerSide.ServiceReferenceReef.TypeSurf[] Surfslst {
            get {
                return this.SurfslstField;
            }
            set {
                if ((object.ReferenceEquals(this.SurfslstField, value) != true)) {
                    this.SurfslstField = value;
                    this.RaisePropertyChanged("Surfslst");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServerSide.ServiceReferenceReef.TypeSurf))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServerSide.ServiceReferenceReef.SurfClubs))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServerSide.ServiceReferenceReef.Locations))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServerSide.ServiceReferenceReef.Comments))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServerSide.ServiceReferenceReef.User))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeSurf", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class TypeSurf : ServerSide.ServiceReferenceReef.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SurfClubs", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class SurfClubs : ServerSide.ServiceReferenceReef.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServerSide.ServiceReferenceReef.Locations LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServerSide.ServiceReferenceReef.Locations Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Locations", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Locations : ServerSide.ServiceReferenceReef.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeatherLinkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cord {
            get {
                return this.CordField;
            }
            set {
                if ((object.ReferenceEquals(this.CordField, value) != true)) {
                    this.CordField = value;
                    this.RaisePropertyChanged("Cord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeatherLink {
            get {
                return this.WeatherLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.WeatherLinkField, value) != true)) {
                    this.WeatherLinkField = value;
                    this.RaisePropertyChanged("WeatherLink");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comments", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Comments : ServerSide.ServiceReferenceReef.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CdatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServerSide.ServiceReferenceReef.Locations LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServerSide.ServiceReferenceReef.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Cdatetime {
            get {
                return this.CdatetimeField;
            }
            set {
                if ((this.CdatetimeField.Equals(value) != true)) {
                    this.CdatetimeField = value;
                    this.RaisePropertyChanged("Cdatetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServerSide.ServiceReferenceReef.Locations Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServerSide.ServiceReferenceReef.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceReef.IServiceSurf")]
    public interface IServiceSurf {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllUser", ReplyAction="http://tempuri.org/IServiceSurf/GetAllUserResponse")]
        ServerSide.ServiceReferenceReef.User[] GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllUser", ReplyAction="http://tempuri.org/IServiceSurf/GetAllUserResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.User[]> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/LogIn", ReplyAction="http://tempuri.org/IServiceSurf/LogInResponse")]
        ServerSide.ServiceReferenceReef.User LogIn(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/LogIn", ReplyAction="http://tempuri.org/IServiceSurf/LogInResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.User> LogInAsync(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertUser", ReplyAction="http://tempuri.org/IServiceSurf/InsertUserResponse")]
        int InsertUser(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertUser", ReplyAction="http://tempuri.org/IServiceSurf/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateUser", ReplyAction="http://tempuri.org/IServiceSurf/UpdateUserResponse")]
        int UpdateUser(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateUser", ReplyAction="http://tempuri.org/IServiceSurf/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteUser", ReplyAction="http://tempuri.org/IServiceSurf/DeleteUserResponse")]
        int DeleteUser(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteUser", ReplyAction="http://tempuri.org/IServiceSurf/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(ServerSide.ServiceReferenceReef.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/GetAllTypeSurfResponse")]
        ServerSide.ServiceReferenceReef.TypeSurf[] GetAllTypeSurf();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/GetAllTypeSurfResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.TypeSurf[]> GetAllTypeSurfAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/InsertTypeSurfResponse")]
        int InsertTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/InsertTypeSurfResponse")]
        System.Threading.Tasks.Task<int> InsertTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/UpdateTypeSurfResponse")]
        int UpdateTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/UpdateTypeSurfResponse")]
        System.Threading.Tasks.Task<int> UpdateTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/DeleteTypeSurfResponse")]
        int DeleteTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteTypeSurf", ReplyAction="http://tempuri.org/IServiceSurf/DeleteTypeSurfResponse")]
        System.Threading.Tasks.Task<int> DeleteTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/GetAllSurfClubsResponse")]
        ServerSide.ServiceReferenceReef.SurfClubs[] GetAllSurfClubs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/GetAllSurfClubsResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.SurfClubs[]> GetAllSurfClubsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/InsertSurfClubsResponse")]
        int InsertSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/InsertSurfClubsResponse")]
        System.Threading.Tasks.Task<int> InsertSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/UpdateSurfClubsResponse")]
        int UpdateSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/UpdateSurfClubsResponse")]
        System.Threading.Tasks.Task<int> UpdateSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/DeleteSurfClubsResponse")]
        int DeleteSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteSurfClubs", ReplyAction="http://tempuri.org/IServiceSurf/DeleteSurfClubsResponse")]
        System.Threading.Tasks.Task<int> DeleteSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllLocations", ReplyAction="http://tempuri.org/IServiceSurf/GetAllLocationsResponse")]
        ServerSide.ServiceReferenceReef.Locations[] GetAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllLocations", ReplyAction="http://tempuri.org/IServiceSurf/GetAllLocationsResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.Locations[]> GetAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertLocations", ReplyAction="http://tempuri.org/IServiceSurf/InsertLocationsResponse")]
        int InsertLocations(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertLocations", ReplyAction="http://tempuri.org/IServiceSurf/InsertLocationsResponse")]
        System.Threading.Tasks.Task<int> InsertLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateLocations", ReplyAction="http://tempuri.org/IServiceSurf/UpdateLocationsResponse")]
        int UpdateLocations(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateLocations", ReplyAction="http://tempuri.org/IServiceSurf/UpdateLocationsResponse")]
        System.Threading.Tasks.Task<int> UpdateLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteLocations", ReplyAction="http://tempuri.org/IServiceSurf/DeleteLocationsResponse")]
        int DeleteLocations(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteLocations", ReplyAction="http://tempuri.org/IServiceSurf/DeleteLocationsResponse")]
        System.Threading.Tasks.Task<int> DeleteLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllComments", ReplyAction="http://tempuri.org/IServiceSurf/GetAllCommentsResponse")]
        ServerSide.ServiceReferenceReef.Comments[] GetAllComments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/GetAllComments", ReplyAction="http://tempuri.org/IServiceSurf/GetAllCommentsResponse")]
        System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.Comments[]> GetAllCommentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertComments", ReplyAction="http://tempuri.org/IServiceSurf/InsertCommentsResponse")]
        int InsertComments(ServerSide.ServiceReferenceReef.Comments comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/InsertComments", ReplyAction="http://tempuri.org/IServiceSurf/InsertCommentsResponse")]
        System.Threading.Tasks.Task<int> InsertCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateComments", ReplyAction="http://tempuri.org/IServiceSurf/UpdateCommentsResponse")]
        int UpdateComments(ServerSide.ServiceReferenceReef.Comments comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/UpdateComments", ReplyAction="http://tempuri.org/IServiceSurf/UpdateCommentsResponse")]
        System.Threading.Tasks.Task<int> UpdateCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteComments", ReplyAction="http://tempuri.org/IServiceSurf/DeleteCommentsResponse")]
        int DeleteComments(ServerSide.ServiceReferenceReef.Comments comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurf/DeleteComments", ReplyAction="http://tempuri.org/IServiceSurf/DeleteCommentsResponse")]
        System.Threading.Tasks.Task<int> DeleteCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSurfChannel : ServerSide.ServiceReferenceReef.IServiceSurf, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSurfClient : System.ServiceModel.ClientBase<ServerSide.ServiceReferenceReef.IServiceSurf>, ServerSide.ServiceReferenceReef.IServiceSurf {
        
        public ServiceSurfClient() {
        }
        
        public ServiceSurfClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSurfClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSurfClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSurfClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServerSide.ServiceReferenceReef.User[] GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.User[]> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public ServerSide.ServiceReferenceReef.User LogIn(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.LogIn(user);
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.User> LogInAsync(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.LogInAsync(user);
        }
        
        public int InsertUser(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int UpdateUser(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(ServerSide.ServiceReferenceReef.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public ServerSide.ServiceReferenceReef.TypeSurf[] GetAllTypeSurf() {
            return base.Channel.GetAllTypeSurf();
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.TypeSurf[]> GetAllTypeSurfAsync() {
            return base.Channel.GetAllTypeSurfAsync();
        }
        
        public int InsertTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.InsertTypeSurf(typeSurf);
        }
        
        public System.Threading.Tasks.Task<int> InsertTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.InsertTypeSurfAsync(typeSurf);
        }
        
        public int UpdateTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.UpdateTypeSurf(typeSurf);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.UpdateTypeSurfAsync(typeSurf);
        }
        
        public int DeleteTypeSurf(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.DeleteTypeSurf(typeSurf);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTypeSurfAsync(ServerSide.ServiceReferenceReef.TypeSurf typeSurf) {
            return base.Channel.DeleteTypeSurfAsync(typeSurf);
        }
        
        public ServerSide.ServiceReferenceReef.SurfClubs[] GetAllSurfClubs() {
            return base.Channel.GetAllSurfClubs();
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.SurfClubs[]> GetAllSurfClubsAsync() {
            return base.Channel.GetAllSurfClubsAsync();
        }
        
        public int InsertSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.InsertSurfClubs(surfClubs);
        }
        
        public System.Threading.Tasks.Task<int> InsertSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.InsertSurfClubsAsync(surfClubs);
        }
        
        public int UpdateSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.UpdateSurfClubs(surfClubs);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.UpdateSurfClubsAsync(surfClubs);
        }
        
        public int DeleteSurfClubs(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.DeleteSurfClubs(surfClubs);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSurfClubsAsync(ServerSide.ServiceReferenceReef.SurfClubs surfClubs) {
            return base.Channel.DeleteSurfClubsAsync(surfClubs);
        }
        
        public ServerSide.ServiceReferenceReef.Locations[] GetAllLocations() {
            return base.Channel.GetAllLocations();
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.Locations[]> GetAllLocationsAsync() {
            return base.Channel.GetAllLocationsAsync();
        }
        
        public int InsertLocations(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.InsertLocations(locations);
        }
        
        public System.Threading.Tasks.Task<int> InsertLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.InsertLocationsAsync(locations);
        }
        
        public int UpdateLocations(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.UpdateLocations(locations);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.UpdateLocationsAsync(locations);
        }
        
        public int DeleteLocations(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.DeleteLocations(locations);
        }
        
        public System.Threading.Tasks.Task<int> DeleteLocationsAsync(ServerSide.ServiceReferenceReef.Locations locations) {
            return base.Channel.DeleteLocationsAsync(locations);
        }
        
        public ServerSide.ServiceReferenceReef.Comments[] GetAllComments() {
            return base.Channel.GetAllComments();
        }
        
        public System.Threading.Tasks.Task<ServerSide.ServiceReferenceReef.Comments[]> GetAllCommentsAsync() {
            return base.Channel.GetAllCommentsAsync();
        }
        
        public int InsertComments(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.InsertComments(comments);
        }
        
        public System.Threading.Tasks.Task<int> InsertCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.InsertCommentsAsync(comments);
        }
        
        public int UpdateComments(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.UpdateComments(comments);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.UpdateCommentsAsync(comments);
        }
        
        public int DeleteComments(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.DeleteComments(comments);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCommentsAsync(ServerSide.ServiceReferenceReef.Comments comments) {
            return base.Channel.DeleteCommentsAsync(comments);
        }
    }
}
